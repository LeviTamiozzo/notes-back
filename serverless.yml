service: notes-api

useDotenv: true

# Create an optimized package for our functions
package:
    individually: true

plugins:
    - serverless-bundle # Package our functions with Webpack
    - serverless-offline
    - serverless-dotenv-plugin # Load .env as environment variables

custom:
    # Our stage is based on what is passed in when running serverless
    # commands. Or fallsback to what we have set in the provider section.
    stage: ${opt:stage, self:provider.stage}
    # Set the table name here so we can use it while testing locally
    tableName: ${self:custom.stage}-notes

provider:
    name: aws
    runtime: nodejs12.x
    stage: prod
    region: us-east-1

    # These environment variables are made available to our functions
    # under process.env.
    environment:
        tableName: ${self:custom.tableName}
        stripeSecretKey: ${env:STRIPE_SECRET_KEY}

    # 'iamRoleStatements' defines the permission policy for the Lambda function.
    # In this case Lambda functions are granted with permissions to access DynamoDB.
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
          # Restrict our IAM role permissions to
          # the specific table for the stage
          Resource:
              - "Fn::GetAtt": [NotesTable, Arn]

functions:
    # Defines an HTTP API endpoint that calls the main function in create.js
    # - path: url path is /notes
    # - method: POST request
    # - authorizer: authenticate using the AWS IAM role
    create:
        handler: functions/create.main
        events:
            - http:
                  path: notes
                  method: post
                  authorizer: aws_iam
                  cors: true

    get:
        # Defines an HTTP API endpoint that calls the main function in get.js
        # - path: url path is /notes/{id}
        # - method: GET request
        handler: functions/get.main
        events:
            - http:
                  path: notes/{id}
                  method: get
                  authorizer: aws_iam
                  cors: true

    list:
        # Defines an HTTP API endpoint that calls the main function in list.js
        # - path: url path is /notes
        # - method: GET request
        handler: functions/list.main
        events:
            - http:
                  path: notes
                  method: get
                  authorizer: aws_iam
                  cors: true

    update:
        # Defines an HTTP API endpoint that calls the main function in update.js
        # - path: url path is /notes/{id}
        # - method: PUT request
        handler: functions/update.main
        events:
            - http:
                  path: notes/{id}
                  method: put
                  authorizer: aws_iam
                  cors: true

    delete:
        # Defines an HTTP API endpoint that calls the main function in delete.js
        # - path: url path is /notes/{id}
        # - method: DELETE request
        handler: functions/delete.main
        events:
            - http:
                  path: notes/{id}
                  method: delete
                  authorizer: aws_iam
                  cors: true
    billing:
        # Defines an HTTP API endpoint that calls the main function in billing.js
        # - path: url path is /billing
        # - method: POST request
        handler: functions/billing.main
        events:
            - http:
                  path: billing
                  method: post
                  authorizer: aws_iam
                  cors: true

# Create our resources with separate CloudFormation templates
resources:
    # API Gateway Errors
    - ${file(resources/api-gateway-errors.yml)}
    # DynamoDB
    - ${file(resources/dynamodb-table.yml)}
    # S3
    - ${file(resources/s3-bucket.yml)}
    # Cognito
    - ${file(resources/cognito-user-pool.yml)}
    - ${file(resources/cognito-identity-pool.yml)}
